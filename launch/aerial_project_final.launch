<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="husky_name" default="husky"/>
  <arg name="world_name" default="$(find final_aerial_project)/worlds/industrial_env_final_markers_v3.world"/>  
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="frame_id" default="odom" />
  <arg name="odometry" default="ground_truth/odometry" />
  <arg name="run_controller" default="true"/>
  <arg name="verbose" default="false"/>
  <arg name="debug_pid" default="false"/>

  <arg name="groundMarkerFile" default="$(find final_aerial_project)/cfg/groundMarkers.yaml"/>
  <arg name="dispatcherConfigFile" default="$(find final_aerial_project)/cfg/Parcel_delivery_dispatcher/parcel_dispatcher.yaml"/>

  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->

 <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(find final_aerial_project)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models:$(find final_aerial_project)/models"/>
  
<include file="$(find gazebo_ros)/launch/empty_world.launch">  
    <arg name="world_name" value="$(arg world_name)" /> 
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
</include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find final_aerial_project)/urdf/firefly_Eurecat.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="y" value="3.5"/>
      <arg name="x" value="3.5"/>
      <arg name="z" value="0.1"/>
    </include>

    <group if="$(arg enable_ground_truth)">
      <param name="fake_twist/linVel_covariance" type="double" value="0.02" />
      <param name="fake_twist/angVel_covariance" type="double" value="0.002" />
      <node name="fake_twist_odometer" pkg="final_aerial_project" type="fake_twist_odometer" output="screen">
        <remap from="/ground_truth_odometry" to="/firefly/ground_truth/odometry" />
      </node>
    </group>

    <group if="$(arg run_controller)">
      <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
        <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
        <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
        <remap from="odometry" to="ground_truth/odometry" />
      </node>
    </group>
  
    <group unless="$(arg run_controller)">
      <node name="controller" pkg="final_aerial_project" type="controller_node" clear_params="true" output="screen">
        <!--remap from="pose_with_covariance" to="ground_truth/pose_with_covariance"/-->
        <remap from="odom" to="$(arg odometry)"/>
        <param name="filtering" value="true" />
        <param name="enable_ros_info" value="false" />
        <param name="start_pose_x" value="3.5" />
        <param name="start_pose_y" value="3.5" />
        <param name="start_pose_z" value="0.1" />
        <param name="waypoint_accuracy" value="0.5"/>
        <param name="yaw_accuracy" value="0.1"/>
        <param name="debug_pid" value="$(arg debug_pid)"/>
        <param name="enable_rviz_goal" value="false"/>
        <rosparam file="$(find final_aerial_project)/cfg/controller.yaml"/>
      </node>

      <group if="$(arg debug_pid)">
        <node name="plotjuggler" pkg="plotjuggler" type="PlotJuggler" args="\-\-layout $(find final_aerial_project)/rviz/plotjuggler.xml" output="screen"/>
        <node name="dynamic_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen"/>
      </group>


      <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
        <rosparam command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_$(arg mav_name).yaml" />
        <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
        <remap from="odometry" to="ground_truth/odometry" />
      </node>
    </group>
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node pkg="tf" type="static_transform_publisher" name="world_odom_broadcaster" args="0 0 0 0 0 0 1 world odom 100" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    
  </group>

  <include file="$(find husky_gazebo)/launch/spawn_husky.launch">
    <arg name="x" default="6.0"/>
    <arg name="y" default="25.0"/>
    <arg name="z" default="0.0"/>
    <arg name="yaw" default="0"/>
    <arg name="laser_enabled" value="false"/>
    <arg name="kinect_enabled" value="false"/>
    <arg name="robot_namespace" value="$(arg husky_name)"/>
  </include> 

  <node pkg="tf" type="static_transform_publisher" name="world_husky_broadcaster" args="-20 -15 0 0 0 0 1 base_link world 100" />

  <!--  Mapping  -->
  <include file="$(find final_aerial_project)/launch/mapping.launch"/>
   
  <!-- Dump groundMarkers info into the parameter server -->
  <rosparam command="load" file="$(arg groundMarkerFile)" />

  <!-- parcel dispatcher -->
  <rosparam command="load" file="$(arg dispatcherConfigFile)" />
  
  <node name="parcel_dispatcher" pkg="final_aerial_project" type="delivery_station" output="screen">
      <remap from="drone_gt" to="firefly/ground_truth/pose"/>
      <remap from="husky_gt" to="husky/odometry/filtered"/>
      <remap from="product_feedback" to="firefly/product_feedback" />
      <remap from="battery_timer" to="firefly/battery_timer" />
  </node>
  
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find final_aerial_project)/rviz/default.rviz" />

</launch>
